version: '3.8'

services:
  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mgnrega-backend
    restart: unless-stopped
    env_file: .env
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/mgnrega
      - REDIS_URL=redis://redis:6379/0
      - DATA_GOV_API_KEY=${DATA_GOV_API_KEY}
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    networks:
      - mgnrega-network

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: mgnrega-db
    restart: unless-stopped
    env_file: .env
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=mgnrega
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    networks:
      - mgnrega-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis for Caching
  redis:
    image: redis:7-alpine
    container_name: mgnrega-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-your_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - mgnrega-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: mgnrega-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./frontend/out:/usr/share/nginx/html
      - ./certs:/etc/letsencrypt
      - ./certs/dhparam:/etc/nginx/dhparam
    depends_on:
      - backend
    networks:
      - mgnrega-network

  # Frontend Service (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: mgnrega-frontend
    restart: unless-stopped
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - mgnrega-network
    # Uncomment for development with hot-reload
    # command: npm run dev

  # Data Ingestion Service (scheduled job)
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mgnrega-worker
    restart: unless-stopped
    env_file: .env
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/mgnrega
      - REDIS_URL=redis://redis:6379/0
      - DATA_GOV_API_KEY=${DATA_GOV_API_KEY}
    volumes:
      - ./backend:/app
    command: >
      bash -c "python -m app.services.data_ingestion"
    depends_on:
      - db
      - redis
    networks:
      - mgnrega-network

  # Monitoring (optional)
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: prometheus
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #   networks:
  #     - mgnrega-network

  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: grafana
  #   ports:
  #     - "3001:3000"
  #   volumes:
  #     - grafana-storage:/var/lib/grafana
  #   environment:
  #     - GF_SECURITY_ADMIN_USER=admin
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #   depends_on:
  #     - prometheus
  #   networks:
  #     - mgnrega-network

# Volumes for persistent data
volumes:
  postgres_data:
  redis_data:
  # grafana-storage:

# Networks
networks:
  mgnrega-network:
    driver: bridge
